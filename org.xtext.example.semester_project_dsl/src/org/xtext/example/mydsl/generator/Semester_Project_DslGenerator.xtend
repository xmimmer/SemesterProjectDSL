/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.semester_Project_Dsl.Model

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Semester_Project_DslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.filter(Model).next
		fsa.generateFile('test.ino', model.compile)
}
		
		def CharSequence compile(Model m) '''
		#include <Arduino.h>
		#include <SensirionI2CScd4x.h>
		#include <Wire.h>
		
		SensirionI2CScd4x scd4x;
		
		«FOR e: m.variables»
		 Variable name = «e.name»;
		«ENDFOR»
		«FOR e: m.sensors»
		int «e.name»;
	    «ENDFOR»
		
		void setup() {
			
		}
		void loop() {
			
		}
		
		
		'''
			
			 
			
			
		}
