/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.semester_Project_Dsl.IP;
import org.xtext.example.mydsl.semester_Project_Dsl.Model;
import org.xtext.example.mydsl.semester_Project_Dsl.Password;
import org.xtext.example.mydsl.semester_Project_Dsl.SSID;
import org.xtext.example.mydsl.semester_Project_Dsl.Semester_Project_DslPackage;
import org.xtext.example.mydsl.semester_Project_Dsl.Sensor;
import org.xtext.example.mydsl.semester_Project_Dsl.Variable;
import org.xtext.example.mydsl.services.Semester_Project_DslGrammarAccess;

@SuppressWarnings("all")
public class Semester_Project_DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Semester_Project_DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Semester_Project_DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Semester_Project_DslPackage.IP:
				sequence_IP(context, (IP) semanticObject); 
				return; 
			case Semester_Project_DslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Semester_Project_DslPackage.PASSWORD:
				sequence_Password(context, (Password) semanticObject); 
				return; 
			case Semester_Project_DslPackage.SSID:
				sequence_SSID(context, (SSID) semanticObject); 
				return; 
			case Semester_Project_DslPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case Semester_Project_DslPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Credentials returns IP
	 *     IP returns IP
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_IP(ISerializationContext context, IP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Semester_Project_DslPackage.Literals.CREDENTIALS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Semester_Project_DslPackage.Literals.CREDENTIALS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIPAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID variables+=Variable* sensors+=Sensor* credentials+=Credentials*)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Credentials returns Password
	 *     Password returns Password
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Password(ISerializationContext context, Password semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Semester_Project_DslPackage.Literals.CREDENTIALS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Semester_Project_DslPackage.Literals.CREDENTIALS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPasswordAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Credentials returns SSID
	 *     SSID returns SSID
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_SSID(ISerializationContext context, SSID semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Semester_Project_DslPackage.Literals.CREDENTIALS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Semester_Project_DslPackage.Literals.CREDENTIALS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSSIDAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=ID pin=INT)
	 * </pre>
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Semester_Project_DslPackage.Literals.SENSOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Semester_Project_DslPackage.Literals.SENSOR__NAME));
			if (transientValues.isValueTransient(semanticObject, Semester_Project_DslPackage.Literals.SENSOR__PIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Semester_Project_DslPackage.Literals.SENSOR__PIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSensorAccess().getPinINTTerminalRuleCall_3_0(), semanticObject.getPin());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Semester_Project_DslPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Semester_Project_DslPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
