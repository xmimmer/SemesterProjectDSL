/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Semester_Project_DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Semester_Project_Dsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Assignment cSensorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSensorsSensorParserRuleCall_3_0 = (RuleCall)cSensorsAssignment_3.eContents().get(0);
		private final Assignment cCredentialsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCredentialsCredentialsParserRuleCall_4_0 = (RuleCall)cCredentialsAssignment_4.eContents().get(0);
		
		//Model:
		//    'Program' name=ID variables+=Variable* sensors+=Sensor* credentials+=Credentials*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Program' name=ID variables+=Variable* sensors+=Sensor* credentials+=Credentials*
		public Group getGroup() { return cGroup; }
		
		//'Program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0() { return cVariablesVariableParserRuleCall_2_0; }
		
		//sensors+=Sensor*
		public Assignment getSensorsAssignment_3() { return cSensorsAssignment_3; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_3_0() { return cSensorsSensorParserRuleCall_3_0; }
		
		//credentials+=Credentials*
		public Assignment getCredentialsAssignment_4() { return cCredentialsAssignment_4; }
		
		//Credentials
		public RuleCall getCredentialsCredentialsParserRuleCall_4_0() { return cCredentialsCredentialsParserRuleCall_4_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Semester_Project_Dsl.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//    'var' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Semester_Project_Dsl.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPinINTTerminalRuleCall_3_0 = (RuleCall)cPinAssignment_3.eContents().get(0);
		
		//Sensor:
		//    'sensor' name=ID',' pin=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID',' pin=INT
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//pin=INT
		public Assignment getPinAssignment_3() { return cPinAssignment_3; }
		
		//INT
		public RuleCall getPinINTTerminalRuleCall_3_0() { return cPinINTTerminalRuleCall_3_0; }
	}
	public class CredentialsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Semester_Project_Dsl.Credentials");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSSIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPasswordParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIPParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Credentials:
		//    SSID | Password | IP
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SSID | Password | IP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SSID
		public RuleCall getSSIDParserRuleCall_0() { return cSSIDParserRuleCall_0; }
		
		//Password
		public RuleCall getPasswordParserRuleCall_1() { return cPasswordParserRuleCall_1; }
		
		//IP
		public RuleCall getIPParserRuleCall_2() { return cIPParserRuleCall_2; }
	}
	public class SSIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Semester_Project_Dsl.SSID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSsidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SSID:
		//    'ssid' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ssid' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ssid'
		public Keyword getSsidKeyword_0() { return cSsidKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PasswordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Semester_Project_Dsl.Password");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPasswordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Password:
		//    'password' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'password' name=ID
		public Group getGroup() { return cGroup; }
		
		//'password'
		public Keyword getPasswordKeyword_0() { return cPasswordKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class IPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Semester_Project_Dsl.IP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IP:
		//    'ip' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ip' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'ip'
		public Keyword getIpKeyword_0() { return cIpKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final VariableElements pVariable;
	private final SensorElements pSensor;
	private final CredentialsElements pCredentials;
	private final SSIDElements pSSID;
	private final PasswordElements pPassword;
	private final IPElements pIP;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Semester_Project_DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pVariable = new VariableElements();
		this.pSensor = new SensorElements();
		this.pCredentials = new CredentialsElements();
		this.pSSID = new SSIDElements();
		this.pPassword = new PasswordElements();
		this.pIP = new IPElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Semester_Project_Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'Program' name=ID variables+=Variable* sensors+=Sensor* credentials+=Credentials*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Variable:
	//    'var' name=ID
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Sensor:
	//    'sensor' name=ID',' pin=INT
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Credentials:
	//    SSID | Password | IP
	//;
	public CredentialsElements getCredentialsAccess() {
		return pCredentials;
	}
	
	public ParserRule getCredentialsRule() {
		return getCredentialsAccess().getRule();
	}
	
	//SSID:
	//    'ssid' name=ID
	//;
	public SSIDElements getSSIDAccess() {
		return pSSID;
	}
	
	public ParserRule getSSIDRule() {
		return getSSIDAccess().getRule();
	}
	
	//Password:
	//    'password' name=ID
	//;
	public PasswordElements getPasswordAccess() {
		return pPassword;
	}
	
	public ParserRule getPasswordRule() {
		return getPasswordAccess().getRule();
	}
	
	//IP:
	//    'ip' name=STRING
	//;
	public IPElements getIPAccess() {
		return pIP;
	}
	
	public ParserRule getIPRule() {
		return getIPAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
